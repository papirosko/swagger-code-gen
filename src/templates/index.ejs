/* eslint-disable */
/*********************************************************
 *********************************************************
 *********************************************************
 *********************************************************
 *********************************************************
 *********************************************************
 ************ GENERATED! DO NOT EDIT! ********************
 *********************************************************
 *********************************************************
 *********************************************************
 *********************************************************
 *********************************************************/
<% if (targetNode) {%>
import fetch, {Request, Response, BodyInit} from 'node-fetch';
<% } %>
<% if (scats) {%>
import {option, Option, Collection, Try, TryLike, none} from 'scats';
<% } %>

export interface RequestOptions {
    apiPrefix?: string;
    headers?: Record<string, string>;
    preProcessRequest?: (request: Request) => Request | Promise<Request>;
    postProcessResponse?: (request: Request, response: Response) => Response | Promise<Response>;
}


export const defaultRequestOptions: RequestOptions = {
    apiPrefix: '',
    headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
    }
};

const defReqOpts = () => defaultRequestOptions;


function valueToString(value: any): string {
    if (typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number') {
        return value.toString();
    } else {
        return JSON.stringify(value);
    }
}

/**
 * Helper to serialize data for 'multipart/form-data'
 */
function objectToForm(o: object): FormData {
    const res = new FormData();
    Object.keys(o)
        .filter(k => o[k] !== undefined && o[k] !== null)
        .forEach(k => {
            res.append(k, valueToString(o[k]));
        });
    return res;
}

/**
 * Helper to serialize data for 'application/x-www-form-urlencoded'
 */
function objectToFormWwwEncoded(o: object): string {
    return Object.keys(o)
        .filter(k => o[k] !== undefined && o[k] !== null)
        .map(k => `${k}=${encodeURIComponent(valueToString(o[k]))}`)
        .join('&');
}

async function requestImpl<T>(request: Request, requestOptions: RequestOptions): Promise<T> {
    const preProcessed = requestOptions.preProcessRequest ? await requestOptions.preProcessRequest(request) : request;
    const resp = await fetch(preProcessed);
    const postProcessed = requestOptions.postProcessResponse ? await requestOptions.postProcessResponse(preProcessed, resp) : resp;
    if (postProcessed.ok) {
        let json: any = null;
        if (postProcessed.headers.has('content-length')) {
            const ct = parseInt(postProcessed.headers.get('content-length'));
            if (ct > 0) {
                json = await postProcessed.json()
            }
        } else {
            json = await postProcessed.json()
        }
        return json as T;
    } else {
        throw postProcessed;
    }
}

<% schemas.foreach(schema => { %>
<%- include('schema.ejs', {schema: schema}); %>
<% }); %>



<%
methods.foreach(method => {
    if (method.body.nonEmpty) {
        method.body.foreach(body => {
%>
<%- include('method.ejs', {method: method, body: scatsLib.some(body)}); %>
<%
        });
    } else {
%>
<%- include('method.ejs', {method: method, body: scatsLib.none }); %>
<%
    }
});
%>



<% if (scats) {%>
<% schemas.foreach(schema => { %>
<%- include('scats-schema.ejs', {schema: schema}); %>
<% }); %>

<%- include('scats-api-client.ejs'); %>

<% } %>


