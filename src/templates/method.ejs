/**
 * <%= method.method.toUpperCase() %> <%= method.path %>
<% if (method.summary) { -%>
 * @summary <%= method.summary %>
<% } -%>
<% if (method.description) { -%>
 * @description <%= method.description %>
<% } -%>
<% if (method.wrapParamsInObject) { -%>
 * @param {Object} params
<% } -%>
<% method.parameters.foreach(p => { -%>
 * @param {<%= p.jsType %>} <%= method.wrapParamsInObject ? 'params.' : '' %><%= p.uniqueName %> <%= p.description.getOrElseValue('')%>
<% }); -%>
<%_ if (body.nonEmpty) { -%>
 * @param {<%= body.get.body.jsType %>} body <%= method.bodyDescription.getOrElseValue('') %>
<%_ } -%>
 * @param {RequestOptions} requestOptions Additional request params
 * @return {<%= method.response.responseType %>} <%= method.response.description %>
 */
export async function <%= method.endpointName %><%= body.map(b => b.suffix).getOrElseValue('') %>(
    <%_ if (!method.wrapParamsInObject) { -%>
    <%_ method.parameters.foreach(p => { -%>
    <%= p.uniqueName %><%= p.required ? '' : '?'%>: <%- p.jsType %><%- p.defaultValue.map(x => ` = ${x}`).getOrElseValue('') %>,
    <%_ }) -%>
    <%_ } else { -%>
    params: {
        <%_ method.parameters.foreach(p => { -%>
        <%= p.uniqueName %><%= p.required ? '' : '?'%>: <%- p.jsType %>,
        <%_ }) -%>
    },
    <%_ } -%>
    <%_ if (body.nonEmpty) { -%>
    body<%= body.get.body.required ? '' : '?'%>: <%- body.get.body.jsType %>,
    <%_ } -%>
    requestOptions: RequestOptions = defReqOpts()
): Promise<<%- method.response.responseType %>> {
    let query = '';
    <%_ if (method.parameters.filter(x => x.in === 'query').nonEmpty) { -%>
    const queryParams = [];
    <%_ method.parameters.filter(x => x.in === 'query' && x.required).foreach(p => { -%>
    <%_ if (p.jsType === 'string') { -%>
    queryParams.push(`<%= p.name %>=${encodeURIComponent(<%= method.wrapParamsInObject ? 'params.' : '' %><%= p.uniqueName %>)}`);
    <%_ } else { -%>
    queryParams.push(`<%= p.name %>=${<%= method.wrapParamsInObject ? 'params.' : '' %><%= p.uniqueName %>}`);
    <%_ }  -%>
    <%_ }) -%>
    <%_ method.parameters.filter(x => x.in === 'query' && !x.required).foreach(p => { -%>
    if (!!<%= method.wrapParamsInObject ? 'params.' : '' %><%= p.uniqueName %>) {
        <%_ if (p.isArray) { -%>
        <%= method.wrapParamsInObject ? 'params.' : '' %><%= p.uniqueName %>.forEach(p => {
            queryParams.push(`<%= p.name %>=${p}`);
        });
        <%_ } else if (p.jsType === 'string') { -%>
        queryParams.push(`<%= p.name %>=${encodeURIComponent(<%= method.wrapParamsInObject ? 'params.' : '' %><%= p.uniqueName %>)}`);
        <%_ } else { -%>
        queryParams.push(`<%= p.name %>=${<%= method.wrapParamsInObject ? 'params.' : '' %><%= p.uniqueName %>}`);
        <%_ }  -%>
    }
    <%_ }) -%>
    if (queryParams.length > 0) {
        query = '?' + queryParams.join('&');
    }
    <%_ }  -%>
    let bodySerialised: BodyInit | null = null;
    <%_ if (body.nonEmpty && body.get.mimeType === 'application/json') {%>
    bodySerialised = JSON.stringify(body);
    <%_ } else if (body.nonEmpty && body.get.mimeType === 'application/x-www-form-urlencoded') { -%>
    bodySerialised = objectToFormWwwEncoded(body);
    <%_ } else if (body.nonEmpty && body.get.mimeType === 'multipart/form-data') { -%>
    bodySerialised = objectToForm(body);
    <%_ } else if (body.nonEmpty && body.get.mimeType === 'application/octet-stream') { -%>
    bodySerialised = body;
    <%_ }  -%>
    const request = new Request(`${requestOptions.apiPrefix}<%- method.pathWithSubstitutions %>${query}`, {
        method: '<%= method.method %>',
        body: bodySerialised,
        headers: {
            ...requestOptions.headers || {},
            'Accept': 'application/json',
            <%_ if (body.nonEmpty && body.get.mimeType !== 'multipart/form-data') {%>
            'Content-Type': '<%= body.get.mimeType %>',
            <%_ }  -%>
            <%_ if (method.parameters.filter(x => x.in === 'header').nonEmpty) { -%>
            <%_ method.parameters.filter(x => x.in === 'header').foreach(p => { -%>
            <%= p.name %>: <%= method.wrapParamsInObject ? 'params.' : '' %><%= p.uniqueName %>,
            <%_ }) -%>
            <%_ }  -%>
        }
    });
    return requestImpl<<%- method.response.responseType %>>(request, requestOptions);
}
