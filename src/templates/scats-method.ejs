    /**
     * <%= method.method.toUpperCase() %> <%= method.path %>
    <% if (method.summary) { -%>
     * @summary <%= method.summary %>
    <% } -%>
    <% if (method.description) { -%>
     * @description <%= method.description %>
    <% } -%>
    <% if (method.wrapParamsInObject) { -%>
     * @param {Object} params
    <% } -%>
    <% method.parameters.foreach(p => { -%>
     * @param {<%= p.jsType %>} <%= method.wrapParamsInObject ? 'params.' : '' %><%= p.uniqueName %> <%= p.description.getOrElseValue('')%>
    <% }); -%>
    <%_ if (body.nonEmpty) { -%>
     * @param {<%= body.get.body.jsType %>} body <%= method.bodyDescription.getOrElseValue('') %>
    <%_ } -%>
     * @param {RequestOptions} requestOptions Additional request params
     * @return {<%= method.response.responseType %>} <%= method.response.description %>
     */
    async <%= method.endpointName %><%= body.map(b => b.suffix).getOrElseValue('') %>(
        <%_ if (!method.wrapParamsInObject) { -%>
        <%_ method.parameters.foreach(p => { -%>
        <%= p.uniqueName %>: <%- p.required && !p.nullable ? p.jsType : `Option<${p.jsType}> = none` %>,
        <%_ }) -%>
        <%_ } else { -%>
        params: {
            <%_ method.parameters.foreach(p => { -%>
            <%= p.uniqueName %><%= p.required && !p.nullable ? '' : '?'%>: <%- p.jsType %>,
            <%_ }) -%>
        },
        <%_ } -%>
        <%_ body.foreach(body => { -%>
        body: <%- body.body.scatsWrapperType %>,
        <%_ }); -%>
        requestOptions: RequestOptions = this.requestOptions
    ): Promise<TryLike<<%- method.response.asProperty.scatsWrapperType %>>> {
        return (await Try.promise(() =>
                <%= method.endpointName %><%= body.map(b => b.suffix).getOrElseValue('') %>(
                    <%_ if (!method.wrapParamsInObject) { -%>
                    <%_ method.parameters.foreach(p => { -%>
                    <%= p.uniqueName %><%- p.required && !p.nullable ? '' : `.orUndefined` %>,
                    <%_ }) -%>
                    <%_ } else { -%>
                    params,
                    <%_ } -%>
                    <%_ body.map(x => x.body).foreach(body => { -%>
                    <%_ if (body.schemaType === 'object') { _%>
                    body.toJson,
                    <%_ } else if (body.schemaType === 'property') { _%>
                    <%_ if (body.isArray && body.itemReferencesObject) { _%>
                    body.map(_ => _.toJson).toArray,
                    <%_ } else if (body.isArray && !body.itemReferencesObject) { -%>
                    body.toArray,
                    <%_ } else if (body.referencesObject && !body.required) { -%>
                    body.map(b => b.toJson).orUndefined,
                    <%_ } else if (body.referencesObject) { -%>
                    body.toJson,
                    <%_ } else if (!body.required) { -%>
                    body.orUndefined,
                    <%_ } else { -%>
                    body,
                    <%_ } -%>
                    <%_ } else { -%>
                    body,
                    <%_ } -%>
                    <%_ }); -%>
                    requestOptions
                )
            ))
            <%_ if (method.response.asProperty.referencesObject) { _%>
            .map(res => <%- method.response.asProperty.scatsWrapperType %>.fromJson(res))
            <%_ } else if (method.response.asProperty.isArray) { _%>
            .map(res => Collection.from(option(res).getOrElseValue([])))
            <%_ if (method.response.asProperty.itemReferencesObject) { _%>
            .map(items => items.map(i => <%- method.response.asProperty.itemScatsWrapperType %>.fromJson(i)))
            <%_ } _%>
            <%_ } _%>;
    }

